{"version":3,"sources":["Header.js","SearchArea.js","BookCard.js","Booklist.js","Books.js","App.js","serviceWorker.js","index.js"],"names":["Header","SearchArea","props","className","onSubmit","searchBook","action","onChange","handleSearch","type","BookCard","src","image","alt","title","author","published","Booklist","books","map","book","i","key","volumeInfo","imageLinks","thumbnail","authors","publishedDate","Books","e","preventDefault","request","get","query","q","state","searchField","then","data","setState","body","items","target","value","this","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6QAUeA,EARA,WACf,OACA,gCACI,yD,QCSWC,EAZI,SAACC,GAChB,OACG,yBAAKC,UAAU,eACZ,0BAAMC,SAAUF,EAAMG,WAAYC,OAAO,IACpC,2BAAOC,SAAUL,EAAMM,aAAcC,KAAK,SAC1C,4BAAQA,KAAK,UAAb,a,gBCQAC,EAbE,SAACR,GAChB,OACE,yBAAKC,UAAU,kBACb,yBAAKQ,IAAKT,EAAMU,MAAOC,IAAI,KAC3B,yBAAKV,UAAU,QACb,4BAAKD,EAAMY,OACX,4BAAKZ,EAAMa,QACX,2BAAIb,EAAMc,cCYHC,EAlBE,SAACf,GAChB,OACE,yBAAKC,UAAU,QAEXD,EAAMgB,MAAMC,KAAI,SAACC,EAAMC,GACvB,OAAO,kBAAC,EAAD,CACHC,IAAKD,EACLT,MAAOQ,EAAKG,WAAWC,WAAWC,UAClCX,MAAOM,EAAKG,WAAWT,MACvBC,OAAQK,EAAKG,WAAWG,QACxBV,UAAWI,EAAKG,WAAWI,qBC+BxBC,E,YAtCb,WAAY1B,GAAO,IAAD,8BACd,4CAAMA,KAOPG,WAAa,SAACwB,GAEVA,EAAEC,iBACCC,IACKC,IAAI,+CACJC,MAAM,CAAEC,EAAG,EAAKC,MAAMC,cACtBC,MAAK,SAACC,GACH,EAAKC,SAAS,CAAErB,MAAM,YAAKoB,EAAKE,KAAKC,aAfrC,EAsBfjC,aAAe,SAACqB,GAEZ,EAAKU,SAAS,CAAEH,YAAaP,EAAEa,OAAOC,SAtBzC,EAAKR,MAAQ,CACbjB,MAAO,GACPkB,YAAa,IAJC,E,sEA6BnB,OACG,6BACK,kBAAC,EAAD,CAAY/B,WAAYuC,KAAKvC,WAAYG,aAAcoC,KAAKpC,eAC5D,kBAAC,EAAD,CAAUU,MAAO0B,KAAKT,MAAMjB,a,GAjCjB2B,aCWLC,G,uLATf,OACA,yBAAK3C,UAAU,OACf,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GALkB0C,cCOEE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,MAAK,SAAAsB,GACjCA,EAAaC,kB","file":"static/js/main.b67476fc.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = () => {\nreturn(\n<header>\n    <h1>Book Search Application</h1>\n</header>\n)\n}\n\nexport default Header;","import React from 'react';\n\nconst SearchArea = (props) => {\n    return(\n       <div className=\"search-area\">\n          <form onSubmit={props.searchBook} action=\"\">\n               <input onChange={props.handleSearch} type=\"text\"/>\n               <button type=\"submit\">Search</button>\n          </form>\n\n        </div>\n    )\n}\n\nexport default SearchArea;","import React from \"react\";\n\nconst BookCard = (props) => {\n  return(\n    <div className=\"card-container\">\n      <img src={props.image} alt=\"\"/>\n      <div className=\"desc\">\n        <h2>{props.title}</h2>\n        <h3>{props.author}</h3>\n        <p>{props.published}</p>\n      </div>\n    </div>\n  )\n}\n\nexport default BookCard;\n","import React from \"react\";\nimport BookCard from \"./BookCard\";\n\nconst Booklist = (props) => {\n  return(\n    <div className=\"list\">\n      {\n        props.books.map((book, i) => {\n        return <BookCard\n            key={i}\n            image={book.volumeInfo.imageLinks.thumbnail}\n            title={book.volumeInfo.title}\n            author={book.volumeInfo.authors}\n            published={book.volumeInfo.publishedDate}\n          />\n        })\n      }\n    </div>\n  )\n}\n\nexport default Booklist;\n","import React, { Component } from 'react';\nimport SearchArea from './SearchArea';\nimport request from 'superagent';\nimport Booklist from \"./Booklist\";\n\nclass Books extends Component {\n  constructor(props){\n      super(props);\n      this.state = {\n      books: [],\n      searchField: ''\n\n      }\n    }\n     searchBook = (e) => {\n         \n         e.preventDefault();\n            request\n                .get(\"https://www.googleapis.com/books/v1/volumes\")\n                .query({ q: this.state.searchField })\n                .then((data) => {\n                    this.setState({ books: [...data.body.items]})\n                }\n\n                )\n\n     }\n\n     handleSearch = (e) => {\n\n         this.setState({ searchField: e.target.value })\n\n     }\n\n render() {\n return (\n    <div>\n         <SearchArea searchBook={this.searchBook} handleSearch={this.handleSearch}/>\n         <Booklist books={this.state.books}/>\n    </div>\n     );\n  }\n}\n\nexport default Books;\n","import React, { Component } from 'react';\nimport Header from './Header';\nimport Books from './Books';\nimport './App.css';\n\nclass App extends Component {\nrender() {\nreturn (\n<div className=\"App\">\n<Header />\n<Books />\n</div>\n);\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}